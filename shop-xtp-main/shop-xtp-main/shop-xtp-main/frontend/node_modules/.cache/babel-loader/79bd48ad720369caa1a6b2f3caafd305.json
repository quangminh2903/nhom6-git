{"ast":null,"code":"import { GENDER } from \"../../../../../../global/const\";\n\nconst random = () => Math.floor(Math.random() * 255);\n\nfunction RandomRGBColor() {\n  let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"border\";\n\n  if (option === \"background\") {\n    return `rgb(${random()}, ${random()}, ${random()}, 0.6)`;\n  }\n\n  return `rgb(${random()}, ${random()}, ${random()})`;\n}\n\n_c = RandomRGBColor;\nexport const convertDataChart = (data, type) => {\n  const keys = Object.keys(data).map(k => {\n    const q = GENDER.find(obj => obj.value === k);\n    return q.label;\n  });\n\n  const convertKey = string => {\n    const q = GENDER.find(obj => obj.label === string);\n    return q.value;\n  };\n\n  let docs = {};\n  Object.entries(data).forEach(el => {\n    const [key, value] = el;\n    docs = { ...docs,\n      [key]: {\n        amount: [],\n        total: []\n      }\n    };\n    docs[key][\"amount\"] = value.map(v => v.amount);\n    docs[key][\"total\"] = value.map(v => v.total);\n  });\n\n  if (type === \"total\") {\n    const datasets = keys.map(k => {\n      return {\n        label: k,\n        data: docs[convertKey(k)].total,\n        // data: RandomAmount(),\n        borderColor: RandomRGBColor(\"border\"),\n        backgroundColor: RandomRGBColor(\"background\")\n      };\n    });\n    return datasets;\n  }\n\n  const datasets = keys.map(k => {\n    return {\n      label: k,\n      data: docs[convertKey(k)].amount,\n      //data: RandomAmount(),\n      borderColor: RandomRGBColor(\"border\"),\n      backgroundColor: RandomRGBColor(\"background\")\n    };\n  });\n  return datasets;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomRGBColor\");","map":{"version":3,"sources":["C:/XTP/shop-xtp-main/shop-xtp-main/frontend/src/components/Navbar/pages/admin/statis/component/convertDataChart.js"],"names":["GENDER","random","Math","floor","RandomRGBColor","option","convertDataChart","data","type","keys","Object","map","k","q","find","obj","value","label","convertKey","string","docs","entries","forEach","el","key","amount","total","v","datasets","borderColor","backgroundColor"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gCAAvB;;AAEA,MAAMC,MAAM,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,GAA3B,CAArB;;AAEA,SAASG,cAAT,GAA2C;AAAA,MAAnBC,MAAmB,uEAAV,QAAU;;AACvC,MAAIA,MAAM,KAAK,YAAf,EAA6B;AACzB,WAAQ,OAAMJ,MAAM,EAAG,KAAIA,MAAM,EAAG,KAAIA,MAAM,EAAG,QAAjD;AACH;;AACD,SAAQ,OAAMA,MAAM,EAAG,KAAIA,MAAM,EAAG,KAAIA,MAAM,EAAG,GAAjD;AACH;;KALQG,c;AAQT,OAAO,MAAME,gBAAgB,GAAC,CAACC,IAAD,EAAMC,IAAN,KAAa;AACvC,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,IAAZ,EAAkBI,GAAlB,CAAsBC,CAAC,IAAI;AACpC,UAAMC,CAAC,GAAGb,MAAM,CAACc,IAAP,CAAYC,GAAG,IAAIA,GAAG,CAACC,KAAJ,KAAcJ,CAAjC,CAAV;AACA,WAAOC,CAAC,CAACI,KAAT;AACH,GAHY,CAAb;;AAKA,QAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3B,UAAMN,CAAC,GAAGb,MAAM,CAACc,IAAP,CAAYC,GAAG,IAAIA,GAAG,CAACE,KAAJ,KAAcE,MAAjC,CAAV;AACA,WAAON,CAAC,CAACG,KAAT;AACH,GAHD;;AAKA,MAAII,IAAI,GAAG,EAAX;AACAV,EAAAA,MAAM,CAACW,OAAP,CAAed,IAAf,EAAqBe,OAArB,CAA6BC,EAAE,IAAI;AAC/B,UAAM,CAAEC,GAAF,EAAOR,KAAP,IAAiBO,EAAvB;AACAH,IAAAA,IAAI,GAAG,EAAE,GAAGA,IAAL;AACH,OAACI,GAAD,GAAQ;AACJC,QAAAA,MAAM,EAAG,EADL;AAEJC,QAAAA,KAAK,EAAG;AAFJ;AADL,KAAP;AAMAN,IAAAA,IAAI,CAACI,GAAD,CAAJ,CAAU,QAAV,IAAsBR,KAAK,CAACL,GAAN,CAAUgB,CAAC,IAAIA,CAAC,CAACF,MAAjB,CAAtB;AACAL,IAAAA,IAAI,CAACI,GAAD,CAAJ,CAAU,OAAV,IAAqBR,KAAK,CAACL,GAAN,CAAUgB,CAAC,IAAIA,CAAC,CAACD,KAAjB,CAArB;AACH,GAVD;;AAWA,MAAIlB,IAAI,KAAK,OAAb,EAAsB;AAClB,UAAMoB,QAAQ,GAAGnB,IAAI,CAACE,GAAL,CAASC,CAAC,IAAI;AAC3B,aAAO;AACHK,QAAAA,KAAK,EAAEL,CADJ;AAEHL,QAAAA,IAAI,EAAEa,IAAI,CAACF,UAAU,CAACN,CAAD,CAAX,CAAJ,CAAoBc,KAFvB;AAGH;AACAG,QAAAA,WAAW,EAAEzB,cAAc,CAAC,QAAD,CAJxB;AAKH0B,QAAAA,eAAe,EAAE1B,cAAc,CAAC,YAAD;AAL5B,OAAP;AAOH,KARgB,CAAjB;AASA,WAAOwB,QAAP;AACH;;AACD,QAAMA,QAAQ,GAAGnB,IAAI,CAACE,GAAL,CAASC,CAAC,IAAI;AAC3B,WAAO;AACHK,MAAAA,KAAK,EAAEL,CADJ;AAEHL,MAAAA,IAAI,EAAEa,IAAI,CAACF,UAAU,CAACN,CAAD,CAAX,CAAJ,CAAoBa,MAFvB;AAIH;AACAI,MAAAA,WAAW,EAAEzB,cAAc,CAAC,QAAD,CALxB;AAMH0B,MAAAA,eAAe,EAAE1B,cAAc,CAAC,YAAD;AAN5B,KAAP;AAQH,GATgB,CAAjB;AAUA,SAAOwB,QAAP;AACH,CA9CM","sourcesContent":["import { GENDER } from \"../../../../../../global/const\"\n\nconst random = () => Math.floor(Math.random() * 255);\n\nfunction RandomRGBColor(option = \"border\") {\n    if (option === \"background\") {\n        return `rgb(${random()}, ${random()}, ${random()}, 0.6)`;\n    }\n    return `rgb(${random()}, ${random()}, ${random()})`;\n}\n\n\nexport const convertDataChart=(data,type)=>{\n    const keys = Object.keys(data).map(k => {\n        const q = GENDER.find(obj => obj.value === k);\n        return q.label;\n    });\n\n    const convertKey = (string) => {\n        const q = GENDER.find(obj => obj.label === string);\n        return q.value;\n    }\n\n    let docs = {};\n    Object.entries(data).forEach(el => {\n        const [ key, value ] = el;\n        docs = { ...docs, \n            [key] : {\n                amount : [],\n                total : []\n            }\n        }\n        docs[key][\"amount\"] = value.map(v => v.amount);\n        docs[key][\"total\"] = value.map(v => v.total);\n    })\n    if (type === \"total\") {\n        const datasets = keys.map(k => {\n            return {\n                label: k,\n                data: docs[convertKey(k)].total,\n                // data: RandomAmount(),\n                borderColor: RandomRGBColor(\"border\"),\n                backgroundColor: RandomRGBColor(\"background\")\n            }\n        })\n        return datasets;\n    }\n    const datasets = keys.map(k => {\n        return {\n            label: k,\n            data: docs[convertKey(k)].amount,\n            \n            //data: RandomAmount(),\n            borderColor: RandomRGBColor(\"border\"),\n            backgroundColor: RandomRGBColor(\"background\"),\n        }\n    })\n    return datasets;\n}"]},"metadata":{},"sourceType":"module"}